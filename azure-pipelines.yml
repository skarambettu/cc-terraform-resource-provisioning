# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  - group: Sandesh

steps:
- task: TerraformInstaller@1
  inputs:
    terraformVersion: 'latest'

- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    commandOptions: '-backend-config=access_key=l4FND4Oxzk4hI3AcQQO2MO2tcRXSbfJa4fmmshf81tSUFgM8RMKtpO8PW+Gc3gctjasuNQcFprzc+AStutDb1g=='
    backendServiceArm: 'COPS(4aef46e4-5a41-4867-9f2e-fa4a3b9dd2d2)'
    backendAzureRmResourceGroupName: 'sandesh-group1'
    backendAzureRmStorageAccountName: 'sandeshblobstore'
    backendAzureRmContainerName: 'sandesh-test'
    backendAzureRmKey: 'test3.tfstate'
    
- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    commandOptions: '-var kafka_api_key=$(kafka-api-key) -var kafka_api_secret=$(kafka-api-secret) -var confluent_cloud_api_key=$(confluent-cloud-api-key) -var confluent_cloud_api_secret=$(confluent-cloud-api-secret) --out=tfplan'
    environmentServiceNameAzureRM: 'COPS(4aef46e4-5a41-4867-9f2e-fa4a3b9dd2d2)'

- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    commandOptions: '-var kafka_api_key=$(kafka-api-key) -var kafka_api_secret=$(kafka-api-secret) -var confluent_cloud_api_key=$(confluent-cloud-api-key) -var confluent_cloud_api_secret=$(confluent-cloud-api-secret)'
    environmentServiceNameAzureRM: 'COPS(4aef46e4-5a41-4867-9f2e-fa4a3b9dd2d2)'
